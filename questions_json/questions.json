{
    "1": {
        "contents": "\n#### Problem1：数据预处理\n    \n    ##### 题目描述：\n    \n    对一组数据进行预处理，以便后续任务。\n    该数据集包含若干特征，既有数值型特征，也有类别型特征：\n    \n    ##### 任务要求：\n    编写一个 Python 脚本，完成以下步骤：\n    1. def OneHot(Y: np.array) -> np.array: 对类别特征进行one hot编码\n    2. def centred(X: np.array) -> np.array: 将每个特征减去其均值\n    3. def normalize(X: np.array) -> np.array: 将数据转换为均值为0，标准差为1的标准正态分布",
        "pretext": "import numpy as np\n\nX = [[1., 2., 3.],\n     [4., 5., 6.],\n     [7., 8., 9., ],\n     [10., 11., 12., ]]\nY = ['A', 'B', 'C', 'D', 'B', 'C', 'D']\n\n\ndef OneHotEncoding(Y: np.ndarray) -> np.ndarray:\n\n\n\ndef centred(X: np.ndarray) -> np.ndarray:\n\n\n\ndef normalize(X: np.ndarray) -> np.ndarray:\n",
        "output": "[[1. 0. 0. 0.]\n [0. 1. 0. 0.]\n [0. 0. 1. 0.]\n [0. 0. 0. 1.]\n [0. 1. 0. 0.]\n [0. 0. 1. 0.]\n [0. 0. 0. 1.]]\n[[-4.5 -4.5 -4.5]\n [-1.5 -1.5 -1.5]\n [ 1.5  1.5  1.5]\n [ 4.5  4.5  4.5]]\n[[-1.34164079 -1.34164079 -1.34164079]\n [-0.4472136  -0.4472136  -0.4472136 ]\n [ 0.4472136   0.4472136   0.4472136 ]\n [ 1.34164079  1.34164079  1.34164079]]\n",
        "answer": "import numpy as np\n# 三维数组\nX = np.array([[1., 2., 3.],\n     [4., 5., 6.],\n     [7., 8., 9., ],\n     [10., 11., 12., ]])\n\nY = np.array(['A', 'B', 'C', 'D', 'B', 'C', 'D'])\n\n\ndef OneHotEncoding(Y: np.ndarray) -> np.ndarray:\n    # 获取唯一类别和类别数量\n    unique_categories = np.unique(Y)\n    num_categories = unique_categories.shape[0]\n    # {类别:索引}\n    category_to_index = {category: index for index, category in enumerate(unique_categories)}\n    # 初始化结果矩阵\n    one_hot_Y = np.zeros((Y.shape[0], unique_categories.shape[0]))\n    # 填充1\n    for idx, category in enumerate(Y):\n        one_hot_Y[idx, category_to_index[category]] = 1\n    return one_hot_Y\n\n\ndef centred(X: np.ndarray) -> np.ndarray:\n    mean_X = np.mean(X, axis=0)\n    # 数据-均值\n    features_centered = X - mean_X\n    return features_centered\n\n\ndef normalize(X: np.ndarray) -> np.ndarray:\n    # 计算每个特征的均值\n    mean = np.mean(X, axis=0)\n    # 计算每个特征的标准差\n    std_dev = np.std(X, axis=0)\n    # 对数据进行正态化处理\n    normalized_data = (X - mean) / std_dev\n    return normalized_data\n\n\nprint(OneHotEncoding(Y))\nprint(centred(X))\nprint(normalize(X))"
    },
    "2": {
        "contents": "\n    定义三个激活函数\n    ",
        "pretext": "\n    import numpy as np\ndef ReLU(Z:np.ndarray) -> np.ndarray:\n    #max(0,z)\n\ndef softmax(Z : np.ndarray) -> np.ndarray:\n    #softmax\n\n\ndef ReLU_deriv(Z:np.ndarray) -> np.ndarray:\n    \"\"\"返回0或1\"\"\"\n    ",
        "answer": "\n    import numpy as np\n#定义激活函数\ndef ReLU(Z:np.ndarray) -> np.ndarray:\n    ## 如果是一维，可以用max？\n    return np.maximum(0,Z)\n\n\ndef softmax(Z : np.ndarray) -> np.ndarray:\n    A = np.exp(Z) / sum(np.exp(Z))\n    return A\n\n\ndef ReLU_deriv(Z:np.ndarray) -> np.ndarray:\n    \"\"\"返回0或1\"\"\"\n    return Z>0",
        "output": ""
    }
}